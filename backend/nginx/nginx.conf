events {
    worker_connections  1024;
}

http {
        upstream back {
                server back:8080;
            }

        upstream front {
            server front:5173;
        }

      upstream ai {
                server ai:8000;
            }

     upstream websocket {
            server websocket:8080;
        }

    server {
        listen 80;
        server_name j10c102.p.ssafy.io;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        server_name j10c102.p.ssafy.io;

        ssl_certificate /etc/ssl/certs/fullchain.pem;
        ssl_certificate_key /etc/ssl/private/privkey.pem;

        client_max_body_size 30M;

         # FRONTEND 프록시
        location / {
            proxy_pass http://front;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

          location /ai/ {
                    rewrite ^/ai(.*) $1 break;
                    proxy_pass http://ai;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_redirect off;
                }

          location /oauth2/ {
                        proxy_pass http://back;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_redirect off;
                    }

          location /login/oauth2/ {
                        proxy_pass http://back;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_redirect off;
                    }



        # BACKEND 프록시
        location /api/ {
           rewrite ^/api(.*) $1 break; # /api 제거
            proxy_pass http://back;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;  # HTTP/1.1 프로토콜 사용
            proxy_set_header Upgrade $http_upgrade;  # Upgrade 헤더 설정
            proxy_set_header Connection "upgrade";  # Connection 헤더 설정
        }

    location /api/ws {
        proxy_pass http://back/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400; # 1 day

        # 보안 WebSocket 연결을 위해 추가된 설정
        proxy_ssl_session_reuse on; # SSL 세션 재사용을 켭니다.
    }


    location /websocket {
               rewrite ^/websocket(.*) $1 break; # /api 제거
               proxy_pass http://websocket;
               proxy_http_version 1.1;
               proxy_set_header Upgrade $http_upgrade;
               proxy_set_header Connection "upgrade";
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;
               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
               proxy_set_header X-Forwarded-Proto $scheme;
       }


    }
}
